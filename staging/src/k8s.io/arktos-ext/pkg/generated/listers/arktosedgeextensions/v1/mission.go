/*
Copyright 2020 Authors of Arktos.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	v1 "k8s.io/arktos-ext/pkg/apis/arktosedgeextensions/v1"
	"k8s.io/client-go/tools/cache"
)

// MissionLister helps list Missions.
type MissionLister interface {
	// List lists all Missions in the indexer.
	List(selector labels.Selector) (ret []*v1.Mission, err error)
	// Missions returns an object that can list and get Missions.
	Missions() MissionTenantLister
	MissionsWithMultiTenancy(tenant string) MissionTenantLister
	// Get retrieves the Mission from the index for a given name.
	Get(name string) (*v1.Mission, error)
	MissionListerExpansion
}

// missionLister implements the MissionLister interface.
type missionLister struct {
	indexer cache.Indexer
}

// NewMissionLister returns a new MissionLister.
func NewMissionLister(indexer cache.Indexer) MissionLister {
	return &missionLister{indexer: indexer}
}

// List lists all Missions in the indexer.
func (s *missionLister) List(selector labels.Selector) (ret []*v1.Mission, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Mission))
	})
	return ret, err
}

// Get retrieves the Mission from the index for a given name.
func (s *missionLister) Get(name string) (*v1.Mission, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("mission"), name)
	}
	return obj.(*v1.Mission), nil
}

// Missions returns an object that can list and get Missions.
func (s *missionLister) Missions() MissionTenantLister {
	return missionTenantLister{indexer: s.indexer, tenant: "system"}
}

func (s *missionLister) MissionsWithMultiTenancy(tenant string) MissionTenantLister {
	return missionTenantLister{indexer: s.indexer, tenant: tenant}
}

// MissionTenantLister helps list and get Missions.
type MissionTenantLister interface {
	// List lists all Missions in the indexer for a given tenant/tenant.
	List(selector labels.Selector) (ret []*v1.Mission, err error)
	// Get retrieves the Mission from the indexer for a given tenant/tenant and name.
	Get(name string) (*v1.Mission, error)
	MissionTenantListerExpansion
}

// missionTenantLister implements the MissionTenantLister
// interface.
type missionTenantLister struct {
	indexer cache.Indexer
	tenant  string
}

// List lists all Missions in the indexer for a given tenant.
func (s missionTenantLister) List(selector labels.Selector) (ret []*v1.Mission, err error) {
	err = cache.ListAllByTenant(s.indexer, s.tenant, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Mission))
	})
	return ret, err
}

// Get retrieves the Mission from the indexer for a given tenant and name.
func (s missionTenantLister) Get(name string) (*v1.Mission, error) {
	key := s.tenant + "/" + name
	if s.tenant == "system" {
		key = name
	}
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("mission"), name)
	}
	return obj.(*v1.Mission), nil
}
