/*
Copyright 2020 Authors of Arktos.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	v1 "k8s.io/arktos-ext/pkg/apis/arktosedgeextensions/v1"
	"k8s.io/client-go/tools/cache"
)

// WorkloadLister helps list Workloads.
type WorkloadLister interface {
	// List lists all Workloads in the indexer.
	List(selector labels.Selector) (ret []*v1.Workload, err error)
	// Workloads returns an object that can list and get Workloads.
	Workloads() WorkloadTenantLister
	WorkloadsWithMultiTenancy(tenant string) WorkloadTenantLister
	// Get retrieves the Workload from the index for a given name.
	Get(name string) (*v1.Workload, error)
	WorkloadListerExpansion
}

// workloadLister implements the WorkloadLister interface.
type workloadLister struct {
	indexer cache.Indexer
}

// NewWorkloadLister returns a new WorkloadLister.
func NewWorkloadLister(indexer cache.Indexer) WorkloadLister {
	return &workloadLister{indexer: indexer}
}

// List lists all Workloads in the indexer.
func (s *workloadLister) List(selector labels.Selector) (ret []*v1.Workload, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Workload))
	})
	return ret, err
}

// Get retrieves the Workload from the index for a given name.
func (s *workloadLister) Get(name string) (*v1.Workload, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("workload"), name)
	}
	return obj.(*v1.Workload), nil
}

// Workloads returns an object that can list and get Workloads.
func (s *workloadLister) Workloads() WorkloadTenantLister {
	return workloadTenantLister{indexer: s.indexer, tenant: "system"}
}

func (s *workloadLister) WorkloadsWithMultiTenancy(tenant string) WorkloadTenantLister {
	return workloadTenantLister{indexer: s.indexer, tenant: tenant}
}

// WorkloadTenantLister helps list and get Workloads.
type WorkloadTenantLister interface {
	// List lists all Workloads in the indexer for a given tenant/tenant.
	List(selector labels.Selector) (ret []*v1.Workload, err error)
	// Get retrieves the Workload from the indexer for a given tenant/tenant and name.
	Get(name string) (*v1.Workload, error)
	WorkloadTenantListerExpansion
}

// workloadTenantLister implements the WorkloadTenantLister
// interface.
type workloadTenantLister struct {
	indexer cache.Indexer
	tenant  string
}

// List lists all Workloads in the indexer for a given tenant.
func (s workloadTenantLister) List(selector labels.Selector) (ret []*v1.Workload, err error) {
	err = cache.ListAllByTenant(s.indexer, s.tenant, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Workload))
	})
	return ret, err
}

// Get retrieves the Workload from the indexer for a given tenant and name.
func (s workloadTenantLister) Get(name string) (*v1.Workload, error) {
	key := s.tenant + "/" + name
	if s.tenant == "system" {
		key = name
	}
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("workload"), name)
	}
	return obj.(*v1.Workload), nil
}
