/*
Copyright 2020 Authors of Arktos.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	watch "k8s.io/apimachinery/pkg/watch"
	arktosedgeextensionsv1 "k8s.io/arktos-ext/pkg/apis/arktosedgeextensions/v1"
	testing "k8s.io/client-go/testing"
)

// FakeWorkloads implements WorkloadInterface
type FakeWorkloads struct {
	Fake *FakeArktosedgeV1
	te   string
}

var workloadsResource = schema.GroupVersionResource{Group: "arktosedge.futurewei.com", Version: "v1", Resource: "workloads"}

var workloadsKind = schema.GroupVersionKind{Group: "arktosedge.futurewei.com", Version: "v1", Kind: "Workload"}

// Get takes name of the workload, and returns the corresponding workload object, and an error if there is any.
func (c *FakeWorkloads) Get(name string, options v1.GetOptions) (result *arktosedgeextensionsv1.Workload, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewTenantGetAction(workloadsResource, name, c.te), &arktosedgeextensionsv1.Workload{})

	if obj == nil {
		return nil, err
	}

	return obj.(*arktosedgeextensionsv1.Workload), err
}

// List takes label and field selectors, and returns the list of Workloads that match those selectors.
func (c *FakeWorkloads) List(opts v1.ListOptions) (result *arktosedgeextensionsv1.WorkloadList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewTenantListAction(workloadsResource, workloadsKind, opts, c.te), &arktosedgeextensionsv1.WorkloadList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &arktosedgeextensionsv1.WorkloadList{ListMeta: obj.(*arktosedgeextensionsv1.WorkloadList).ListMeta}
	for _, item := range obj.(*arktosedgeextensionsv1.WorkloadList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested workloads.
func (c *FakeWorkloads) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewTenantWatchAction(workloadsResource, opts, c.te))

}

// Create takes the representation of a workload and creates it.  Returns the server's representation of the workload, and an error, if there is any.
func (c *FakeWorkloads) Create(workload *arktosedgeextensionsv1.Workload) (result *arktosedgeextensionsv1.Workload, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewTenantCreateAction(workloadsResource, workload, c.te), &arktosedgeextensionsv1.Workload{})

	if obj == nil {
		return nil, err
	}

	return obj.(*arktosedgeextensionsv1.Workload), err
}
